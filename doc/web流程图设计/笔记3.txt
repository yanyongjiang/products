   $("#fldflowFname").unbind("change").change(function () {
                var text=$(this).val();
                if(!FlowDesign.flowdata[formid]){
                    FlowDesign.flowdata[formid]={};
                }
                FlowDesign.flowdata[formid].fldflowFname=text;
            });
			
			fldflowname 
			
			fldcatname
			
			fldcatid
			
			"{"fldcatid":"a60bb3cd5164443b863a86441ebb664e",
			"fldcatname":"大幅度",
			"fldflowname":"787878",
			"flowFp_linec1af97ee65c70695":{"fldflowFname":""},
			"flowTp_tasknode1bbe4e1de89e5d40":{"fldcatid":"","fldflowTaskname":""},
			"flowTp_tasknode27f920c1e6b19a39":{"fldcatid":"","fldflowTaskname":""},
			"flowFp_lineffb5ea098d21418e":{"fldflowFname":""},
			"flowTp_tasknode595ff2b39879ffe5":{"fldcatid":"","fldflowTaskname":""},
			"flowFp_linebb6841efd2db9e3e":{"fldflowFname":""},
			"nodes":[{"blockId":"startnodef24ad95644d6860e",
			         "nodetype":"flow_start_node_div","nodetext":"开始","positionX":373,"positionY":91},
			          {"blockId":"tasknode1bbe4e1de89e5d40","nodetype":"flow_task_node_div","nodetext":"用户任务","positionX":359,"positionY":177},{"blockId":"tasknode27f920c1e6b19a39","nodetype":"flow_task_node_div","nodetext":"用户任务","positionX":140,"positionY":177},{"blockId":"tasknode595ff2b39879ffe5","nodetype":"flow_task_node_div","nodetext":"用户任务","positionX":140,"positionY":269},{"blockId":"endnodea793745926f85153","nodetype":"flow_end_node_div","nodetext":""
					  
					  
					  var formatJson = function(json, options) {
                    var reg = null,
                        formatted = '',
                        pad = 0,
                        PADDING = '    '; // one can also use '\t' or a different number of spaces
                    // optional settings
                    options = options || {};
                    // remove newline where '{' or '[' follows ':'
                    options.newlineAfterColonIfBeforeBraceOrBracket = (options.newlineAfterColonIfBeforeBraceOrBracket === true) ? true : false;
                    // use a space after a colon
                    options.spaceAfterColon = (options.spaceAfterColon === false) ? false : true;
 
                    // begin formatting...
 
                    // make sure we start with the JSON as a string
                    if (typeof json !== 'string') {
                        json = JSON.stringify(json);
                    }
                    // parse and stringify in order to remove extra whitespace
                    json = JSON.parse(json);
                    json = JSON.stringify(json);
 
                    // add newline before and after curly braces
                    reg = /([\{\}])/g;
                    json = json.replace(reg, '\r\n$1\r\n');
 
                    // add newline before and after square brackets
                    reg = /([\[\]])/g;
                    json = json.replace(reg, '\r\n$1\r\n');
 
                    // add newline after comma
                    reg = /(\,)/g;
                    json = json.replace(reg, '$1\r\n');
 
                    // remove multiple newlines
                    reg = /(\r\n\r\n)/g;
                    json = json.replace(reg, '\r\n');
 
                    // remove newlines before commas
                    reg = /\r\n\,/g;
                    json = json.replace(reg, ',');
 
                    // optional formatting...
                    if (!options.newlineAfterColonIfBeforeBraceOrBracket) {
                        reg = /\:\r\n\{/g;
                        json = json.replace(reg, ':{');
                        reg = /\:\r\n\[/g;
                        json = json.replace(reg, ':[');
                    }
                    if (options.spaceAfterColon) {
                        reg = /\:/g;
                        json = json.replace(reg, ': ');
                    }
 
                    $.each(json.split('\r\n'), function(index, node) {
                        var i = 0,
                            indent = 0,
                            padding = '';
 
                        if (node.match(/\{$/) || node.match(/\[$/)) {
                            indent = 1;
                        } else if (node.match(/\}/) || node.match(/\]/)) {
                            if (pad !== 0) {
                                pad -= 1;
                            }
                        } else {
                            indent = 0;
                        }
 
                        for (i = 0; i < pad; i++) {
                            padding += PADDING;
                        }
                        formatted += padding + node + '\r\n';
                        pad += indent;
                    });
                    return formatted;
                };
效果图
--------------------- 
作者：熬夜是小狗 
来源：CSDN 
原文：https://blog.csdn.net/icannotdebug/article/details/79418935 
版权声明：本文为博主原创文章，转载请附上博文链接！